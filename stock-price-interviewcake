// Suppose we could access yesterday's stock prices as an array, where:

// The indices are the time in minutes past trade opening time, which was 9:30am local time.
// The values are the price in dollars of Apple stock at that time.
// So if the stock cost $500 at 10:30am, stockPricesYesterday[60] = 500.

// Write an efficient function that takes stockPricesYesterday and returns the best profit I could have made from 1 purchase and 1 sale of 1 Apple stock yesterday.

// For example:

//   var stockPricesYesterday = [10, 7, 5, 8, 11, 9];

// getMaxProfit(stockPricesYesterday);
// // returns 6 (buying for $5 and selling for $11)

// No "shorting"—you must buy before you sell. You may not buy and sell in the same time step (at least 1 minute must pass).

// Suppose we could access yesterday's stock prices as an array, where:

// The indices are the time in minutes past trade opening time, which was 9:30am local time.
// The values are the price in dollars of Apple stock at that time.
// So if the stock cost $500 at 10:30am, stockPricesYesterday[60] = 500.

// Write an efficient function that takes stockPricesYesterday and returns the best profit I could have made from 1 purchase and 1 sale of 1 Apple stock yesterday.

// For example:

//   var stockPricesYesterday = [10, 7, 5, 8, 11, 9];

// getMaxProfit(stockPricesYesterday);
// // returns 6 (buying for $5 and selling for $11)

// No "shorting"—you must buy before you sell. You may not buy and sell in the same time step (at least 1 minute must pass).

var stockPricesYesterday = [10, 7, 5, 8, 11, 9];

// Quadratic Time Complexity - O(n^2)
function getMaxProfit(array) {
  var largestDiff = 0;
  for (var i = 0; i < array.length; i++) {
    for (var j = i + 1; j < array.length; j++) {
      if ((array[j] - array[i]) > largestDiff) {
        largestDiff = (array[j] - array[i])
      }
    }
  }  
  return largestDiff
}

getMaxProfit(stockPricesYesterday)

// Linear Time Complexity - O(n)
function getMaxProfit2(array) {
  var minPrice = array[0]
  var maxProfit = array[1] - array[0]
  
  for (var i = 0; i < array.length; i++) {
    var currentPrice = array[i]
    var potentialProfit = currentPrice - minPrice
    maxProfit = Math.max(maxProfit, potentialProfit)
    minPrice = Math.min(minPrice, currentPrice)
  }
  return maxProfit
}

getMaxProfit2(stockPricesYesterday)



